# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 're.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import math
import numpy as np
import matplotlib.pyplot as plt 
from array import*

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(998, 797)
        font = QtGui.QFont()
        font.setFamily("Microsoft PhagsPa")
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-140, 10, 1291, 101))
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(22)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 460, 501, 61))
        self.pushButton.setStyleSheet("background-color: rgb(208, 241, 255);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 620, 511, 61))
        self.pushButton_2.setStyleSheet("\n"
"background-color: rgb(208, 241, 255);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 540, 511, 61))
        self.pushButton_3.setStyleSheet("background-color: rgb(208, 241, 255);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 160, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(40, 210, 281, 21))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(40, 260, 271, 21))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(0, 111, 1011, 20))
        self.label_5.setStyleSheet("background-color: rgb(0, 255, 255);\n"
"background-color: rgb(0, 0, 0);")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(10, 110, 1011, 331))
        self.label_6.setStyleSheet("background-color: rgb(191, 191, 191);")
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(330, 160, 181, 22))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(330, 210, 181, 22))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(330, 260, 181, 22))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(40, 310, 291, 31))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(330, 310, 181, 22))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(540, 120, 16, 331))
        self.label_8.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(0, 440, 1011, 16))
        self.label_9.setStyleSheet("background-color: rgb(3, 4, 3);")
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(580, 140, 141, 16))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(580, 160, 141, 22))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_5.setFont(font)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(0, 0, 991, 16))
        self.label_11.setStyleSheet("background-color: rgb(2, 2, 2);")
        self.label_11.setText("")
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(0, 10, 16, 751))
        self.label_12.setStyleSheet("background-color: rgb(8, 8, 8);")
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(10, 730, 981, 20))
        self.label_13.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label_13.setText("")
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(580, 210, 281, 16))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(580, 230, 141, 22))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_6.setFont(font)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(580, 280, 221, 16))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setGeometry(QtCore.QRect(580, 300, 141, 22))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_7.setFont(font)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(981, 0, 20, 751))
        self.label_16.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label_16.setText("")
        self.label_16.setObjectName("label_16")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(580, 350, 271, 20))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_8.setGeometry(QtCore.QRect(580, 370, 113, 22))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_8.setFont(font)
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(10, 450, 971, 281))
        self.label_18.setStyleSheet("background-color: rgb(191, 191, 191);")
        self.label_18.setText("")
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(570, 480, 361, 211))
        self.label_19.setStyleSheet("border-image: url(:/newPrefix/logo.jpg);")
        self.label_19.setText("")
        self.label_19.setObjectName("label_19")
        self.label_18.raise_()
        self.label_6.raise_()
        self.label.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.label_5.raise_()
        self.lineEdit.raise_()
        self.lineEdit_2.raise_()
        self.lineEdit_3.raise_()
        self.label_7.raise_()
        self.lineEdit_4.raise_()
        self.label_8.raise_()
        self.label_9.raise_()
        self.label_10.raise_()
        self.lineEdit_5.raise_()
        self.label_11.raise_()
        self.label_12.raise_()
        self.label_13.raise_()
        self.label_14.raise_()
        self.lineEdit_6.raise_()
        self.label_15.raise_()
        self.lineEdit_7.raise_()
        self.label_16.raise_()
        self.label_17.raise_()
        self.lineEdit_8.raise_()
        self.label_19.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 998, 26))
        self.menubar.setObjectName("menubar")
        self.menuFUEL_CELL = QtWidgets.QMenu(self.menubar)
        self.menuFUEL_CELL.setObjectName("menuFUEL_CELL")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuFUEL_CELL.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton.clicked.connect(self.hydrogencell)
        self.pushButton_3.clicked.connect(self.power)
        self.pushButton_2.clicked.connect(self.Eff)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "INTERFACE DESIGN OF HYDROGEN FUEL CELL"))
        self.pushButton.setText(_translate("MainWindow", "V-I CHARACTERISTICS"))
        self.pushButton_2.setText(_translate("MainWindow", "EFFICIENCY CURVE"))
        self.pushButton_3.setText(_translate("MainWindow", "P-I CHARACTERISTICS"))
        self.label_2.setText(_translate("MainWindow", "TEMPERATURE VALUE ONE :"))
        self.label_3.setText(_translate("MainWindow", "TEMPERATURE VALUE SECOND:"))
        self.label_4.setText(_translate("MainWindow", "TEMPERATURE VALUE THIRD:"))
        self.label_7.setText(_translate("MainWindow", "PARTIAL PRESSURE OF OXYGEN:"))
        self.label_10.setText(_translate("MainWindow", "NUMBER OF CELL"))
        self.lineEdit_5.setText(_translate("MainWindow", "40"))
        self.label_12.setText(_translate("MainWindow", "TextLabel"))
        self.label_14.setText(_translate("MainWindow", "PARTIAL PRESSURE OF HYDROGEN "))
        self.lineEdit_6.setText(_translate("MainWindow", "1 ATM"))
        self.label_15.setText(_translate("MainWindow", "ACTIVE AREA OF FUEL CELL"))
        self.lineEdit_7.setText(_translate("MainWindow", "50.6 cm^2"))
        self.label_17.setText(_translate("MainWindow", "MAXIMUM CURRENT DENSITY"))
        self.lineEdit_8.setText(_translate("MainWindow", "1.5"))
        self.menuFUEL_CELL.setTitle(_translate("MainWindow", "FUEL CELL"))

    def hydrogencell(self):
        
        num1=self.lineEdit.text()
        num2=self.lineEdit_2.text()
        num3=self.lineEdit_3.text()
        num4=self.lineEdit_4.text()
        t2=float(num1)
        t1=float(num2)
        t3=float(num3)
        PO2=float(num4)

        nt=3
        
        c = array('f',[])
        v = array('f',[])
        k = array('f',[])
        k_stack = array('f',[])
        e = array('f',[])
        l=array('f',[])
        m=array('f',[])
        l1=array('f',[])
        k1=array('f',[])
        k1_stack=array('f',[])
        e1=array('f',[])
        c1=array('f',[])
        l2=array('f',[])
        k2=array('f',[])
        k2_stack=array('f',[])
        e2=array('f',[])
        c2=array('f',[])
        
        x=75.00
            #I = float(input("Enter the  current in Ampere:"))  # current drawn from fuel cell in ampere(2)
            #float(input("Enter the Temperature in Kelvin:"))#298.15
        #PO2 = 1
        PH2 = 1

        R = 8.3144  # KJ/Kmole.K
        n = 1
        Afc = 50.6
        F = 96484  # columbs/mole
        B = 0.015  # (R*T)/(n*F)
        Jmax = 1.5
            # data for calculation of Vact
        zeta_1 = -0.948
        zeta_2 = 0.0030373688787134006
        zeta_3 = 7.6*(10**-5)
        zeta_4 = -1.93*(10**-4)

         
        while nt>0:
            if(nt==2):
                T=t1
                T=T+272.15
            elif(nt==1):
                T=t2
                T=T+273.15
            elif(nt==3):
                T=t3
                T=373.15
             #T = float(input("Enter the Temperature: "))
            Enernest = float(1.229 - (8.5 * 10 ** -4) * (T - 298.15) + ((4.308 * 10 ** -5) * T * (math.log(PH2) + 0.5 * (math.log(PO2)))))
            for i in np.arange(0.1,x,0.1,dtype=float):
                
                
                #print("Current = ", i)
                J = i / Afc
                # calculation of nernest eq
                #print("The value of Enernest is: ",Enernest," volts")

                CH2 = (PH2) / (1.09 * (10 ** 6) * (math.exp(77 / T)))
                CO2 = (PO2) / (5.08 * (10 ** 6) * (math.exp(-498 / T))) 
                #print("CH2 is: ",CH2)
                #print("CO2 is: ",CO2)
                #print()
                Vact = -((zeta_1)+(zeta_2*T)+(zeta_3*T)*(np.log(CO2))+(zeta_4)*(np.log(i)))
                #print("The value of Activation loss is: ",Vact," volts")  # -0.7172

                # data for calculation of Vohm
                L = 0.0178  # float(input("Enter the value of thickness of membrane in cm:"))
                Afc = 50.6  # float(input("Enter the value of Active area of fuel cell in sq.cm :"))
                lamda = 23  # float(input("Enter the   value of semi-imperical variable:"))
                R = 8.3144
                F = 96485

                X = 181.6 * (1 + 0.03 * (i / Afc) + 0.062 * ((T / 303) ** 2) * (i / Afc) ** 2.5)  # 181.63
                Y = (lamda - 0.634 - 3 * (i / Afc)) * (math.exp(4.18 * (T - 303) / T))

                Rm = float(X / Y)  # Resistivity in ohm.cm
                Rions = float((Rm * L) / Afc)  # Ionic Resistivity
                Vohm = i * Rions

                #print("The value of ohmic loss is: ",Vohm," volts")

                # calculation for Vcon : There is another formula for Vcon

                Vcon = -B * math.log(1 - (J / Jmax))

                #print("The value of Concentration loss is: ",Vcon," volts")

                Loss = Vact + Vohm + Vcon
                #print("The value of Loss is: ", Loss)

                N = 40
                Vcell = Enernest - Loss
                Vstack = N * Vcell
                #Eth = 1.23 
                P = Vcell*i
                P_stack = N*P 
                mu_f = 0.95
                HHV  = 1.482
                eff = (mu_f*Vcell)/HHV
                #print("The value of Vcell is: ", Vcell)
                #print("The value of Vstack is: ", Vstack)
                #print("The value of efficiency is: ", eff)
                #print("The value of power is: ", P)
                #print("\n")

                '''c.append(float(i))
                v.append(float(Vcell))
                k.append(float(P))
                k_stack.append(float(P_stack))
                e.append(float(eff))'''
                if(nt==2):
                    c.append(float(i))
                    l.append(float(Vstack))
                    k.append(float(P))
                    k_stack.append(float(P_stack))
                    e.append(float(eff))
                    
                    
                    
                    
                    
                    
                elif(nt==1):
                    c1.append(float(i))
                    l1.append(float(Vstack))
                    k1.append(float(P))
                    k1_stack.append(float(P_stack))
                    e1.append(float(eff))

                elif(nt==3):
                    c2.append(float(i))
                    l2.append(float(Vstack))
                    k2.append(float(P))
                    k2_stack.append(float(P_stack))
                    e2.append(float(eff))

                    
                    
                    
                    
                    
                    
            nt = nt - 1
             
        plt.plot(c,l,label=t1)
        plt.plot(c,l1,label=t2)
        plt.plot(c,l2,label=t3)
        #plt.plot(c,P_stack)
        plt.xlabel('current')
        plt.ylabel('Vstack')
        plt.title('VI  Characteristics')
        plt.legend()
        plt.show()


    def power(self):

        num1=self.lineEdit.text()
        num2=self.lineEdit_2.text()
        num3=self.lineEdit_3.text()
        num4=self.lineEdit_4.text()
        t2=float(num1)
        t1=float(num2)
        t3=float(num3)
        PO2=float(num4)

        nt=3
        c = array('f',[])
        v = array('f',[])
        k = array('f',[])
        k_stack = array('f',[])
        e = array('f',[])
        l=array('f',[])
        m=array('f',[])
        l1=array('f',[])
        k1=array('f',[])
        k1_stack=array('f',[])
        e1=array('f',[])
        c1=array('f',[])
        l2=array('f',[])
        k2=array('f',[])
        k2_stack=array('f',[])
        e2=array('f',[])
        c2=array('f',[])
        x=75.00
            #I = float(input("Enter the  current in Ampere:"))  # current drawn from fuel cell in ampere(2)
            #float(input("Enter the Temperature in Kelvin:"))#298.15
        #PO2 = 1
        PH2 = 1

        R = 8.3144  # KJ/Kmole.K
        n = 1
        Afc = 50.6
        F = 96484  # columbs/mole
        B = 0.015  # (R*T)/(n*F)
        Jmax = 1.5
            # data for calculation of Vact
        zeta_1 = -0.948
        zeta_2 = 0.0030373688787134006
        zeta_3 = 7.6*(10**-5)
        zeta_4 = -1.93*(10**-4)

         
        while nt>0:
            if(nt==2):
                T=t1
                T=T+272.15
            elif(nt==1):
                T=t2
                T=T+273.15     
            elif(nt==3):
                T=t3
                T=T+273.15
                
             #T = float(input("Enter the Temperature: "))
            Enernest = float(1.229 - (8.5 * 10 ** -4) * (T - 298.15) + ((4.308 * 10 ** -5) * T * (math.log(PH2) + 0.5 * (math.log(PO2)))))
            for i in np.arange(0.1,x,0.1,dtype=float):
                
                
                #print("Current = ", i)
                J = i / Afc
                # calculation of nernest eq
                #print("The value of Enernest is: ",Enernest," volts")

                CH2 = (PH2) / (1.09 * (10 ** 6) * (math.exp(77 / T)))
                CO2 = (PO2) / (5.08 * (10 ** 6) * (math.exp(-498 / T))) 
                #print("CH2 is: ",CH2)
                #print("CO2 is: ",CO2)
                #print()
                Vact = -((zeta_1)+(zeta_2*T)+(zeta_3*T)*(np.log(CO2))+(zeta_4)*(np.log(i)))
                #print("The value of Activation loss is: ",Vact," volts")  # -0.7172

                # data for calculation of Vohm
                L = 0.0178  # float(input("Enter the value of thickness of membrane in cm:"))
                Afc = 50.6  # float(input("Enter the value of Active area of fuel cell in sq.cm :"))
                lamda = 23  # float(input("Enter the   value of semi-imperical variable:"))
                R = 8.3144
                F = 96485

                X = 181.6 * (1 + 0.03 * (i / Afc) + 0.062 * ((T / 303) ** 2) * (i / Afc) ** 2.5)  # 181.63
                Y = (lamda - 0.634 - 3 * (i / Afc)) * (math.exp(4.18 * (T - 303) / T))

                Rm = float(X / Y)  # Resistivity in ohm.cm
                Rions = float((Rm * L) / Afc)  # Ionic Resistivity
                Vohm = i * Rions

                #print("The value of ohmic loss is: ",Vohm," volts")

                # calculation for Vcon : There is another formula for Vcon

                Vcon = -B * math.log(1 - (J / Jmax))

                #print("The value of Concentration loss is: ",Vcon," volts")

                Loss = Vact + Vohm + Vcon
                #print("The value of Loss is: ", Loss)

                N = 40
                Vcell = Enernest - Loss
                Vstack = N * Vcell
                #Eth = 1.23 
                P = Vcell*i
                P_stack = N*P 
                mu_f = 0.95
                HHV  = 1.482
                eff = (mu_f*Vcell)/HHV
                #print("The value of Vcell is: ", Vcell)
                #print("The value of Vstack is: ", Vstack)
                #print("The value of efficiency is: ", eff)
                #print("The value of power is: ", P)
                #print("\n")

                '''c.append(float(i))
                v.append(float(Vcell))
                k.append(float(P))
                k_stack.append(float(P_stack))
                e.append(float(eff))'''
                if(nt==2):
                    c.append(float(i))
                    l.append(float(Vstack))
                    k.append(float(P))
                    k_stack.append(float(P_stack))
                    e.append(float(eff))
                    
            
                elif(nt==1):
                    c1.append(float(i))
                    l1.append(float(Vstack))
                    k1.append(float(P))
                    k1_stack.append(float(P_stack))
                    e1.append(float(eff))

                elif(nt==3):
                    c2.append(float(i))
                    l2.append(float(Vstack))
                    k2.append(float(P))
                    k2_stack.append(float(P_stack))
                    e2.append(float(eff))

                    
                    
                    
                    
                    
            nt = nt - 1
        plt.figure(2)     
        plt.plot(c,k_stack,label=t1)
        plt.plot(c,k1_stack,label=t2)
        plt.plot(c,k2_stack,label=t3)
        #plt.plot(c,P_stack)
        plt.xlabel('current')
        plt.ylabel('Power Stack')
        plt.title('PI-Characteristics')
        plt.legend()
        plt.show()


    def Eff(self):


        num1=self.lineEdit.text()
        num2=self.lineEdit_2.text()
        num3=self.lineEdit_3.text()
        num4=self.lineEdit_4.text()
        t2=float(num1)
        t1=float(num2)
        t3=float(num3)
        PO2=float(num4)

        nt=3
        c = array('f',[])
        v = array('f',[])
        k = array('f',[])
        k_stack = array('f',[])
        e = array('f',[])
        l=array('f',[])
        m=array('f',[])
        l1=array('f',[])
        k1=array('f',[])
        k1_stack=array('f',[])
        e1=array('f',[])
        c1=array('f',[])
        l2=array('f',[])
        k2=array('f',[])
        k2_stack=array('f',[])
        e2=array('f',[])
        c2=array('f',[])
        x=75.00
            #I = float(input("Enter the  current in Ampere:"))  # current drawn from fuel cell in ampere(2)
            #float(input("Enter the Temperature in Kelvin:"))#298.15
        #PO2 = 1
        PH2 = 1

        R = 8.3144  # KJ/Kmole.K
        n = 1
        Afc = 50.6
        F = 96484  # columbs/mole
        B = 0.015  # (R*T)/(n*F)
        Jmax = 1.5
            # data for calculation of Vact
        zeta_1 = -0.948
        zeta_2 = 0.0030373688787134006
        zeta_3 = 7.6*(10**-5)
        zeta_4 = -1.93*(10**-4)

         
        while nt>0:
            if(nt==2):
                T=t1
                T=T+272.15
            
            elif(nt==1):
                T=t2
                T=T+273.15
            elif(nt==3):
                T=t3
                T=T+273.15
             #T = float(input("Enter the Temperature: "))
            Enernest = float(1.229 - (8.5 * 10 ** -4) * (T - 298.15) + ((4.308 * 10 ** -5) * T * (math.log(PH2) + 0.5 * (math.log(PO2)))))
            for i in np.arange(0.1,x,0.1,dtype=float):
                
                
                #print("Current = ", i)
                J = i / Afc
                # calculation of nernest eq
                #print("The value of Enernest is: ",Enernest," volts")

                CH2 = (PH2) / (1.09 * (10 ** 6) * (math.exp(77 / T)))
                CO2 = (PO2) / (5.08 * (10 ** 6) * (math.exp(-498 / T))) 
                #print("CH2 is: ",CH2)
                #print("CO2 is: ",CO2)
                #print()
                Vact = -((zeta_1)+(zeta_2*T)+(zeta_3*T)*(np.log(CO2))+(zeta_4)*(np.log(i)))
                #print("The value of Activation loss is: ",Vact," volts")  # -0.7172

                # data for calculation of Vohm
                L = 0.0178  # float(input("Enter the value of thickness of membrane in cm:"))
                Afc = 50.6  # float(input("Enter the value of Active area of fuel cell in sq.cm :"))
                lamda = 23  # float(input("Enter the   value of semi-imperical variable:"))
                R = 8.3144
                F = 96485

                X = 181.6 * (1 + 0.03 * (i / Afc) + 0.062 * ((T / 303) ** 2) * (i / Afc) ** 2.5)  # 181.63
                Y = (lamda - 0.634 - 3 * (i / Afc)) * (math.exp(4.18 * (T - 303) / T))

                Rm = float(X / Y)  # Resistivity in ohm.cm
                Rions = float((Rm * L) / Afc)  # Ionic Resistivity
                Vohm = i * Rions

                #print("The value of ohmic loss is: ",Vohm," volts")

                # calculation for Vcon : There is another formula for Vcon

                Vcon = -B * math.log(1 - (J / Jmax))

                #print("The value of Concentration loss is: ",Vcon," volts")

                Loss = Vact + Vohm + Vcon
                #print("The value of Loss is: ", Loss)

                N = 40
                Vcell = Enernest - Loss
                Vstack = N * Vcell
                #Eth = 1.23 
                P = Vcell*i
                P_stack = N*P 
                mu_f = 0.95
                HHV  = 1.482
                eff = ((mu_f*Vcell)/HHV)*100
                #print("The value of Vcell is: ", Vcell)
                #print("The value of Vstack is: ", Vstack)
                #print("The value of efficiency is: ", eff)
                #print("The value of power is: ", P)
                #print("\n")

                '''c.append(float(i))
                v.append(float(Vcell))
                k.append(float(P))
                k_stack.append(float(P_stack))
                e.append(float(eff))'''
                if(nt==2):
                    c.append(float(i))
                    l.append(float(Vstack))
                    k.append(float(P))
                    k_stack.append(float(P_stack))
                    e.append(float(eff))
                    
                    
                    
                    
                    
                    
                elif(nt==1):
                    c1.append(float(i))
                    l1.append(float(Vstack))
                    k1.append(float(P))
                    k1_stack.append(float(P_stack))
                    e1.append(float(eff))
                elif(nt==3):
                    c2.append(float(i))
                    l2.append(float(Vstack))
                    k2.append(float(P))
                    k2_stack.append(float(P_stack))
                    e2.append(float(eff))

                    
                    
                    
                    
                    
            nt = nt - 1
        plt.figure(3)     
        plt.plot(c,e,label=t1)
        plt.plot(c,e1,label=t2)
        plt.plot(c,e2,label=t3)
        #plt.plot(c,P_stack)
        plt.xlabel('current')
        plt.ylabel('Efficiency')
        plt.title('Efficiency curve')
        plt.legend()
        plt.show()


import photo




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
